// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudentsServiceClient is the client API for StudentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentsServiceClient interface {
	GetStudents(ctx context.Context, in *GetStudentsRequest, opts ...grpc.CallOption) (*GetStudentsResponse, error)
	CreateStudent(ctx context.Context, in *CreateStudentRequest, opts ...grpc.CallOption) (*Student, error)
}

type studentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentsServiceClient(cc grpc.ClientConnInterface) StudentsServiceClient {
	return &studentsServiceClient{cc}
}

func (c *studentsServiceClient) GetStudents(ctx context.Context, in *GetStudentsRequest, opts ...grpc.CallOption) (*GetStudentsResponse, error) {
	out := new(GetStudentsResponse)
	err := c.cc.Invoke(ctx, "/grpc.StudentsService/GetStudents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentsServiceClient) CreateStudent(ctx context.Context, in *CreateStudentRequest, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/grpc.StudentsService/CreateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentsServiceServer is the server API for StudentsService service.
// All implementations must embed UnimplementedStudentsServiceServer
// for forward compatibility
type StudentsServiceServer interface {
	GetStudents(context.Context, *GetStudentsRequest) (*GetStudentsResponse, error)
	CreateStudent(context.Context, *CreateStudentRequest) (*Student, error)
	mustEmbedUnimplementedStudentsServiceServer()
}

// UnimplementedStudentsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStudentsServiceServer struct {
}

func (UnimplementedStudentsServiceServer) GetStudents(context.Context, *GetStudentsRequest) (*GetStudentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudents not implemented")
}
func (UnimplementedStudentsServiceServer) CreateStudent(context.Context, *CreateStudentRequest) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudent not implemented")
}
func (UnimplementedStudentsServiceServer) mustEmbedUnimplementedStudentsServiceServer() {}

// UnsafeStudentsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentsServiceServer will
// result in compilation errors.
type UnsafeStudentsServiceServer interface {
	mustEmbedUnimplementedStudentsServiceServer()
}

func RegisterStudentsServiceServer(s grpc.ServiceRegistrar, srv StudentsServiceServer) {
	s.RegisterService(&StudentsService_ServiceDesc, srv)
}

func _StudentsService_GetStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentsServiceServer).GetStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.StudentsService/GetStudents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentsServiceServer).GetStudents(ctx, req.(*GetStudentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentsService_CreateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentsServiceServer).CreateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.StudentsService/CreateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentsServiceServer).CreateStudent(ctx, req.(*CreateStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StudentsService_ServiceDesc is the grpc.ServiceDesc for StudentsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.StudentsService",
	HandlerType: (*StudentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStudents",
			Handler:    _StudentsService_GetStudents_Handler,
		},
		{
			MethodName: "CreateStudent",
			Handler:    _StudentsService_CreateStudent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "students.proto",
}
